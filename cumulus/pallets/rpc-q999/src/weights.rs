//! Autogenerated weights for pallet_rpc_q999
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0
//! DATE: 2025-03-15, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/substrate
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_rpc_q999
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./frame/rpc-q999/src/weights.rs
// --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_rpc_q999.
pub trait WeightInfo {
    fn create_token() -> Weight;
    fn create_profile() -> Weight;
    fn create_zone() -> Weight;
    fn create_circuit() -> Weight;
    fn transfer_token() -> Weight;
    fn join_zone() -> Weight;
    fn add_circuit_to_profile() -> Weight;
}

/// Weights for pallet_rpc_q999 using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    fn create_token() -> Weight {
        Weight::from_parts(28_750_000, 0)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    
    fn create_profile() -> Weight {
        Weight::from_parts(31_500_000, 0)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    
    fn create_zone() -> Weight {
        Weight::from_parts(24_900_000, 0)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    
    fn create_circuit() -> Weight {
        Weight::from_parts(21_670_000, 0)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    
    fn transfer_token() -> Weight {
        Weight::from_parts(42_800_000, 0)
            .saturating_add(T::DbWeight::get().reads(6))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    
    fn join_zone() -> Weight {
        Weight::from_parts(32_400_000, 0)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    
    fn add_circuit_to_profile() -> Weight {
        Weight::from_parts(29_500_000, 0)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(1))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn create_token() -> Weight {
        Weight::from_parts(28_750_000, 0)
            .saturating_add(RocksDbWeight::get().reads(3))
            .saturating_add(RocksDbWeight::get().writes(2))
    }
    
    fn create_profile() -> Weight {
        Weight::from_parts(31_500_000,.0)
            .saturating_add(RocksDbWeight::get().reads(2))
            .saturating_add(RocksDbWeight::get().writes(3))
    }
    
    fn create_zone() -> Weight {
        Weight::from_parts(24_900_000, 0)
            .saturating_add(RocksDbWeight::get().reads(2))
            .saturating_add(RocksDbWeight::get().writes(2))
    }
    
    fn create_circuit() -> Weight {
        Weight::from_parts(21_670_000, 0)
            .saturating_add(RocksDbWeight::get().reads(1))
            .saturating_add(RocksDbWeight::get().writes(1))
    }
    
    fn transfer_token() -> Weight {
        Weight::from_parts(42_800_000, 0)
            .saturating_add(RocksDbWeight::get().reads(6))
            .saturating_add(RocksDbWeight::get().writes(1))
    }
    
    fn join_zone() -> Weight {
        Weight::from_parts(32_400_000, 0)
            .saturating_add(RocksDbWeight::get().reads(3))
            .saturating_add(RocksDbWeight::get().writes(2))
    }
    
    fn add_circuit_to_profile() -> Weight {
        Weight::from_parts(29_500_000, 0)
            .saturating_add(RocksDbWeight::get().reads(3))
            .saturating_add(RocksDbWeight::get().writes(1))
    }
}

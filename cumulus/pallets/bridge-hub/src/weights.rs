//! Autogenerated weights for pallet_bridge_hub
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2025-03-15, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/substrate
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_bridge_hub
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./frame/bridge-hub/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_bridge_hub.
pub trait WeightInfo {
    fn register_bridge() -> Weight;
    fn update_bridge() -> Weight;
    fn generate_quantum_key() -> Weight;
    fn send_message(b: u32) -> Weight;
    fn confirm_message() -> Weight;
    fn receive_message(b: u32) -> Weight;
    fn register_community_proposal() -> Weight;
    fn register_supply_chain_entry() -> Weight;
}

/// Weights for pallet_bridge_hub using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    // Weight for registering a new blockchain bridge
    fn register_bridge() -> Weight {
        Weight::from_parts(50_000_000, 0)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    
    // Weight for updating an existing blockchain bridge
    fn update_bridge() -> Weight {
        Weight::from_parts(35_000_000, 0)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    
    // Weight for generating a new quantum key
    fn generate_quantum_key() -> Weight {
        Weight::from_parts(150_000_000, 0)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    
    // Weight for sending a message (depends on message size b)
    fn send_message(b: u32) -> Weight {
        Weight::from_parts(50_000_000, 0)
            .saturating_add(Weight::from_parts(b as u64 * 20_000, 0))
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    
    // Weight for confirming a message
    fn confirm_message() -> Weight {
        Weight::from_parts(25_000_000, 0)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    
    // Weight for receiving a message (depends on message size b)
    fn receive_message(b: u32) -> Weight {
        Weight::from_parts(60_000_000, 0)
            .saturating_add(Weight::from_parts(b as u64 * 25_000, 0))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    
    // Weight for registering a community proposal
    fn register_community_proposal() -> Weight {
        Weight::from_parts(40_000_000, 0)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    
    // Weight for registering a supply chain entry
    fn register_supply_chain_entry() -> Weight {
        Weight::from_parts(45_000_000, 0)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
}

// For testing
impl WeightInfo for () {
    fn register_bridge() -> Weight {
        Weight::from_parts(50_000_000, 0)
    }
    
    fn update_bridge() -> Weight {
        Weight::from_parts(35_000_000, 0)
    }
    
    fn generate_quantum_key() -> Weight {
        Weight::from_parts(150_000_000, 0)
    }
    
    fn send_message(_b: u32) -> Weight {
        Weight::from_parts(50_000_000, 0)
    }
    
    fn confirm_message() -> Weight {
        Weight::from_parts(25_000_000, 0)
    }
    
    fn receive_message(_b: u32) -> Weight {
        Weight::from_parts(60_000_000, 0)
    }
    
    fn register_community_proposal() -> Weight {
        Weight::from_parts(40_000_000, 0)
    }
    
    fn register_supply_chain_entry() -> Weight {
        Weight::from_parts(45_000_000, 0)
    }
}
